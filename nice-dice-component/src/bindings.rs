// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod cceckman {
        pub mod nice_dice {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod nice_dice {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum ErrorCode {
                    Parse,
                    NegativeCount,
                    KeepTooFew,
                    DivideByZero,
                    InvalidSymbol,
                    UnboundSymbols,
                    ZeroFacedDie,
                }
                impl ::core::fmt::Debug for ErrorCode {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ErrorCode::Parse => {
                                f.debug_tuple("ErrorCode::Parse").finish()
                            }
                            ErrorCode::NegativeCount => {
                                f.debug_tuple("ErrorCode::NegativeCount").finish()
                            }
                            ErrorCode::KeepTooFew => {
                                f.debug_tuple("ErrorCode::KeepTooFew").finish()
                            }
                            ErrorCode::DivideByZero => {
                                f.debug_tuple("ErrorCode::DivideByZero").finish()
                            }
                            ErrorCode::InvalidSymbol => {
                                f.debug_tuple("ErrorCode::InvalidSymbol").finish()
                            }
                            ErrorCode::UnboundSymbols => {
                                f.debug_tuple("ErrorCode::UnboundSymbols").finish()
                            }
                            ErrorCode::ZeroFacedDie => {
                                f.debug_tuple("ErrorCode::ZeroFacedDie").finish()
                            }
                        }
                    }
                }
                impl ErrorCode {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> ErrorCode {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => ErrorCode::Parse,
                            1 => ErrorCode::NegativeCount,
                            2 => ErrorCode::KeepTooFew,
                            3 => ErrorCode::DivideByZero,
                            4 => ErrorCode::InvalidSymbol,
                            5 => ErrorCode::UnboundSymbols,
                            6 => ErrorCode::ZeroFacedDie,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Error {
                    pub code: ErrorCode,
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Error")
                            .field("code", &self.code)
                            .field("message", &self.message)
                            .finish()
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for Error {}
                /// A probability distribution of integer values.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Distribution {
                    handle: _rt::Resource<Distribution>,
                }
                type _DistributionRep<T> = Option<T>;
                impl Distribution {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Distribution`.
                    pub fn new<T: GuestDistribution>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _DistributionRep<T> = Some(val);
                        let ptr: *mut _DistributionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestDistribution>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestDistribution>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestDistribution>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _DistributionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestDistribution>(&self) -> *mut _DistributionRep<T> {
                        Distribution::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Distribution`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct DistributionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Distribution>,
                }
                impl<'a> DistributionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestDistribution>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _DistributionRep<T> {
                        Distribution::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Distribution {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]distribution"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                /// A parsed dice expression.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Expression {
                    handle: _rt::Resource<Expression>,
                }
                type _ExpressionRep<T> = Option<T>;
                impl Expression {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Expression`.
                    pub fn new<T: GuestExpression>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ExpressionRep<T> = Some(val);
                        let ptr: *mut _ExpressionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestExpression>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestExpression>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestExpression>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _ExpressionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestExpression>(&self) -> *mut _ExpressionRep<T> {
                        Expression::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Expression`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ExpressionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Expression>,
                }
                impl<'a> ExpressionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestExpression>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ExpressionRep<T> {
                        Expression::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Expression {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]expression"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                /// An Evaluator evaluates dice expressions.
                /// It can perform caching of intermediate results, which can boost performance,
                /// especially when experimenting with expressions.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Evaluator {
                    handle: _rt::Resource<Evaluator>,
                }
                type _EvaluatorRep<T> = Option<T>;
                impl Evaluator {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Evaluator`.
                    pub fn new<T: GuestEvaluator>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _EvaluatorRep<T> = Some(val);
                        let ptr: *mut _EvaluatorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestEvaluator>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestEvaluator>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestEvaluator>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _EvaluatorRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestEvaluator>(&self) -> *mut _EvaluatorRep<T> {
                        Evaluator::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Evaluator`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct EvaluatorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Evaluator>,
                }
                impl<'a> EvaluatorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestEvaluator>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _EvaluatorRep<T> {
                        Evaluator::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Evaluator {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]evaluator"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_parse_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::parse(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let Error { code: code3, message: message3 } = e;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (code3.clone() as i32) as u8;
                            let vec4 = (message3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_parse<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_evaluator_cabi<T: GuestEvaluator>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Evaluator::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_evaluator_render_distribution_table_cabi<
                    T: GuestEvaluator,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base1 = arg1;
                    let len1 = arg2;
                    let mut result1 = _rt::Vec::with_capacity(len1);
                    for i in 0..len1 {
                        let base = base1.add(i * 4);
                        let e1 = {
                            let l0 = *base.add(0).cast::<i32>();
                            unsafe { ExpressionBorrow::lift(l0 as u32 as usize) }
                        };
                        result1.push(e1);
                    }
                    _rt::cabi_dealloc(base1, len1 * 4, 4);
                    let result2 = T::render_distribution_table(
                        unsafe { EvaluatorBorrow::lift(arg0 as u32 as usize) }.get(),
                        result1,
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let Error { code: code5, message: message5 } = e;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (code5.clone() as i32) as u8;
                            let vec6 = (message5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_evaluator_render_distribution_table<
                    T: GuestEvaluator,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Distribution: GuestDistribution;
                    type Expression: GuestExpression;
                    type Evaluator: GuestEvaluator;
                    /// Attempt to parse the dice expression.
                    fn parse(text: _rt::String) -> Result<Expression, Error>;
                }
                pub trait GuestDistribution: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]distribution"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]distribution"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                }
                pub trait GuestExpression: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]expression"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]expression"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                }
                pub trait GuestEvaluator: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]evaluator"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]cceckman:nice-dice/nice-dice"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]evaluator"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Self;
                    /// Evaluate the distributions of the provided exprssions,
                    /// and render them as a table.
                    fn render_distribution_table(
                        &self,
                        exprs: _rt::Vec<ExpressionBorrow<'_>>,
                    ) -> Result<_rt::String, Error>;
                }
                #[doc(hidden)]
                macro_rules! __export_cceckman_nice_dice_nice_dice_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "cceckman:nice-dice/nice-dice#parse")] unsafe extern "C" fn
                        export_parse(arg0 : * mut u8, arg1 : usize,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_parse_cabi::<$ty > (arg0, arg1) }
                        } #[unsafe (export_name =
                        "cabi_post_cceckman:nice-dice/nice-dice#parse")] unsafe extern
                        "C" fn _post_return_parse(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_parse::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cceckman:nice-dice/nice-dice#[constructor]evaluator")] unsafe
                        extern "C" fn export_constructor_evaluator() -> i32 { unsafe {
                        $($path_to_types)*:: _export_constructor_evaluator_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Evaluator > () } } #[unsafe
                        (export_name =
                        "cceckman:nice-dice/nice-dice#[method]evaluator.render-distribution-table")]
                        unsafe extern "C" fn
                        export_method_evaluator_render_distribution_table(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*::
                        _export_method_evaluator_render_distribution_table_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Evaluator > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_cceckman:nice-dice/nice-dice#[method]evaluator.render-distribution-table")]
                        unsafe extern "C" fn
                        _post_return_method_evaluator_render_distribution_table(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_evaluator_render_distribution_table::<<$ty
                        as $($path_to_types)*:: Guest >::Evaluator > (arg0) } } const _ :
                        () = { #[doc(hidden)] #[unsafe (export_name =
                        "cceckman:nice-dice/nice-dice#[dtor]distribution")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Distribution::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Distribution > (rep) } } }; const _
                        : () = { #[doc(hidden)] #[unsafe (export_name =
                        "cceckman:nice-dice/nice-dice#[dtor]expression")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Expression::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Expression > (rep) } } }; const _ :
                        () = { #[doc(hidden)] #[unsafe (export_name =
                        "cceckman:nice-dice/nice-dice#[dtor]evaluator")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Evaluator::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Evaluator > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_cceckman_nice_dice_nice_dice_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_nice_dice_wasm_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::cceckman::nice_dice::nice_dice::__export_cceckman_nice_dice_nice_dice_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::cceckman::nice_dice::nice_dice);
    };
}
#[doc(inline)]
pub(crate) use __export_nice_dice_wasm_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:cceckman:nice-dice:nice-dice-wasm:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 548] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9f\x03\x01A\x02\x01\
A\x02\x01B\x14\x01m\x07\x05parse\x0enegative-count\x0ckeep-too-few\x0edivide-by-\
zero\x0einvalid-symbol\x0funbound-symbols\x0ezero-faced-die\x04\0\x0aerror-code\x03\
\0\0\x01r\x02\x04code\x01\x07messages\x04\0\x05error\x03\0\x02\x04\0\x0cdistribu\
tion\x03\x01\x04\0\x0aexpression\x03\x01\x04\0\x09evaluator\x03\x01\x01i\x06\x01\
@\0\0\x07\x04\0\x16[constructor]evaluator\x01\x08\x01h\x06\x01h\x05\x01p\x0a\x01\
j\x01s\x01\x03\x01@\x02\x04self\x09\x05exprs\x0b\0\x0c\x04\0+[method]evaluator.r\
ender-distribution-table\x01\x0d\x01i\x05\x01j\x01\x0e\x01\x03\x01@\x01\x04texts\
\0\x0f\x04\0\x05parse\x01\x10\x04\0\x1ccceckman:nice-dice/nice-dice\x05\0\x04\0!\
cceckman:nice-dice/nice-dice-wasm\x04\0\x0b\x14\x01\0\x0enice-dice-wasm\x03\0\0\0\
G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindge\
n-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
